name: cicd

on:
  push:
    branches:
      - main
      - "feature/*"
      - "bugfix/*"
      - "release/*"

env:
  LINUX_IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/eee-linux
  WINDOWS_IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/eee-ltsc2025
  MULTIARCH_IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/eee
  PROJECT_PATH: src/ExperienceEdgeEmu.Web/ExperienceEdgeEmu.Web.csproj

jobs:
  get_version:
    name: Generate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Generate version string
        id: version
        run: |
          BRANCH_NAME="${{ steps.branch-name.outputs.current_branch }}"
          if [ "$BRANCH_NAME" == "main" ]; then
            VERSION="1.0.${{ github.run_number }}"
          else
            VERSION="1.0.${{ github.run_number }}-${BRANCH_NAME}"
          fi
          echo "value=$VERSION" >> $GITHUB_OUTPUT

  build_and_push_images:
    name: Build and push images (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: get_version
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            repo: ghcr.io/${{ github.repository_owner }}/eee-linux
            base_image: ""
          - os: windows-2025
            runtime: win-x64
            repo: ghcr.io/${{ github.repository_owner }}/eee-ltsc2025
            base_image: "/p:ContainerBaseImage=mcr.microsoft.com/dotnet/aspnet:9.0-nanoserver-ltsc2025"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build project as local Docker image (versioned)
        run: >
          dotnet publish ${{ env.PROJECT_PATH }}
          /t:PublishContainer
          /p:RestoreLockedMode=true
          /p:ContainerRuntimeIdentifier=${{ matrix.runtime }}
          /p:ContainerRepository=${{ matrix.repo }}
          /p:ContainerImageTag=${{ needs.get_version.outputs.version }}
          ${{ matrix.base_image }}

      - name: Push image (versioned)
        run: docker image push ${{ matrix.repo }}:${{ needs.get_version.outputs.version }}

      - name: Tag and push image (latest)
        run: |
          docker image tag ${{ matrix.repo }}:${{ needs.get_version.outputs.version }} ${{ matrix.repo }}:latest
          docker image push ${{ matrix.repo }}:latest

  create_manifest:
    name: Create Docker manifests
    runs-on: ubuntu-latest
    needs: [get_version, build_and_push_images]
    permissions:
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest (latest)
        run: |
          docker manifest create ${{ env.MULTIARCH_IMAGE_REPO }}:latest --amend ${{ env.WINDOWS_IMAGE_REPO }}:latest --amend ${{ env.LINUX_IMAGE_REPO }}:latest
          docker manifest push ${{ env.MULTIARCH_IMAGE_REPO }}:latest

      - name: Create and push multi-arch manifest (versioned)
        run: |
          docker manifest create ${{ env.MULTIARCH_IMAGE_REPO }}:${{ needs.get_version.outputs.version }} --amend ${{ env.WINDOWS_IMAGE_REPO }}:${{ needs.get_version.outputs.version }} --amend ${{ env.LINUX_IMAGE_REPO }}:${{ needs.get_version.outputs.version }}
          docker manifest push ${{ env.MULTIARCH_IMAGE_REPO }}:${{ needs.get_version.outputs.version }}

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [get_version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
          cache: true

      - name: Publish Windows binary
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -o ./release/win-x64 --property RestoreLockedMode=true

      - name: Publish Linux binary
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -o ./release/linux-x64 --property RestoreLockedMode=true

      - name: Upload Windows binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: eee-win-x64
          path: release/win-x64/eee.exe

      - name: Upload Linux binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: eee-linux-x64
          path: release/linux-x64/eee

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get_version.outputs.version }}
          name: v${{ needs.get_version.outputs.version }}
          files: |
            release/win-x64/eee.exe
            release/linux-x64/eee
